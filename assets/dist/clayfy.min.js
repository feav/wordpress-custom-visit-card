! function() {
    function e() {
        function e(e) {
            e.originalEvent.touches && 1 == e.originalEvent.touches.length && (e = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0]), t.diffX = t.firstX - e.pageX, t.diffY = t.firstY - e.pageY
        }
        var t, o = null,
            i = function() {
                $(document).off("mouseup touchend", i), o && (clearTimeout(o), $(document).off("mousemove touchmove", e))
            };
        this.callFunction = function(n, a, r) {
            if (!a) return r(n);
            t = {
                firstX: n.pageX,
                firstY: n.pageY,
                diffX: 0,
                diffY: 0
            }, $(document).on("mousemove touchmove", e), $(document).on("mouseup touchend", i), o = setTimeout(function() {
                $(document).off("mousemove touchmove", e), Math.abs(t.diffX) < 5 && Math.abs(t.diffY) < 5 && r(n)
            }, a)
        }
    }

    function t(t, i) {
        this.el = t instanceof $ ? t : $(t), this.draggableBox, this.x, this.y, this.dX, this.dY, this.diffDX, this.diffDY, this.history = {
            dX: [0, 0, 0],
            dY: [0, 0, 0],
            diffDX: 0,
            diffDY: 0
        }, this.actualPos, this.originalPos, this.initPos = {
            y: 0,
            x: 0,
            scrollTop: null,
            scrollLeft: null
        }, this.bounderies = {}, this.droppedTarget, this.scrollable = [], this.container = {}, this.tempContainer = $("<div>", {
            style: "position: absolute; top:0; left:0"
        }), this.droppable = {
            dragElement: [],
            dropArea: []
        }, this.status = "ready", this.callableIfNotMove = new e, this.settings = $.extend(!0, {}, $.clayfy.settings, i);
        var n, a, r = this,
            s = !1,
            l = $("body"),
            d = $("<div>", {
                style: "height:100%;width:100%;position:fixed;top:0;left:0"
            });
        this.contentGhost;
        var g, f, p, c, h = function(e) {
                if ("canceling" !== r.status && r.settings.move) {
                    var t = r.getPosition(),
                        o = r.draggableBox.offset();
                    if (r.contentGhost ? r.contentGhost : r.draggableBox, r.container.offset) {
                        var i = r.container.offset.innerBottom,
                            n = r.container.offset.innerRight;
                        o.top >= i - r.el.outerHeight() && (t.y += i - r.el.outerHeight() - o.top), o.left >= n - r.el.outerWidth() && (t.x += n - r.el.outerWidth() - o.left)
                    }
                    r.el.css({
                        top: t.y,
                        left: t.x
                    }), "clayfy-dropinside" === e.type && (i = e.area.offset.innerBottom, n = e.area.offset.innerRight, o.top >= i - r.el.outerHeight() && (t.y += i - r.el.outerHeight() - o.top), o.left >= n - r.el.outerWidth() && (t.x += n - r.el.outerWidth() - o.left), r.el.css({
                        top: t.y,
                        left: t.x
                    }))
                }
                r.draggableBox.detach()
            },
            u = function(e) {
                27 === e.keyCode && r.cancel(e)
            };
        this.cancel = function(e) {
            r.status = "canceling", r.draggableBox.animate({
                top: r.initPos.y,
                left: r.initPos.x
            }, 100, function() {
                r.draggableBox.trigger("mouseup"), r.status = "ready"
            }), null !== r.initPos.scrollTop && r.initPos.parent.animate({
                scrollTop: r.initPos.scrollTop
            }, 100), null !== r.initPos.scrollLeft && r.initPos.parent.animate({
                scrollLeft: r.initPos.scrollLeft
            }, 100)
        }, r.scrollables = [];
        var y = function(e) {
                var t = !1,
                    o = !1,
                    i = $(window);
                return e.is("body") ? (l.height() > i.height() && (o = !0), l.width() > i.width() && (t = !0)) : (e[0].scrollHeight > e.height() && (o = !0), e[0].scrollWidth > e.width() && (t = !0)), {
                    x: t,
                    y: o
                }
            },
            b = function(e) {
                var t, o, i, n, a, r, s, l = e instanceof $ ? e : $(e);
                return l.length ? (t = l[0].style.position, "static" === l.css("position") && l.css({
                    position: "relative"
                }), i = $("<div>", {
                    style: "position:absolute;top:0;left:0;bottom:0;right:0"
                }), o = $("<div>", {
                    style: "position:absolute;top:0;left:0;width:100%;height:100%"
                }), i.append(o), l.append(i), n = o.width(), a = o.height(), r = parseInt(o.css("border-top-width")), s = parseInt(o.css("border-left-width")), i.remove(), l[0].style.position = t, {
                    innerWidth: n,
                    innerHeight: a,
                    innerOffset: {
                        top: r,
                        left: s,
                        bottom: a + r,
                        right: n + s
                    }
                }) : {
                    width: 0,
                    height: 0
                }
            },
            v = function(e, t, o) {
                t.interval[o] && clearInterval(t.interval[o]);
                var i = function(e) {};
                switch (o) {
                    case "bottom":
                        i = function(o) {
                            o = o || 10, t.el.scrollTop(t.el.scrollTop() + o), t.isParent && (r.x = e.pageX, r.setBounderies(), r.updateDropArea(), g = !0)
                        };
                        break;
                    case "top":
                        i = function(o) {
                            o = o || 10, t.el.scrollTop(t.el.scrollTop() - o), t.isParent && (r.x = e.pageX, r.setBounderies(), r.updateDropArea(), f = !0)
                        };
                        break;
                    case "left":
                        i = function(o) {
                            o = o || 10, t.el.scrollLeft(t.el.scrollLeft() - o), t.isParent && (r.y = e.pageY, r.setBounderies(), r.updateDropArea(), p = !0)
                        };
                        break;
                    case "right":
                        i = function(o) {
                            o = o || 10, t.el.scrollLeft(t.el.scrollLeft() + o), t.isParent && (r.y = e.pageY, r.setBounderies(), r.updateDropArea(), c = !0)
                        }
                }
                i(3), t.isParent || (t.interval[o] = setInterval(i, 50))
            },
            m = function(e, t) {
                if (t) e.interval[t] && (clearInterval(e.interval[t]), e.interval[t] = !1);
                else
                    for (var o in r.scrollables) {
                        var i = r.scrollables[o].interval;
                        for (var n in i) i[n] && (clearInterval(i[n]), i[n] = !1)
                    }
            };
        this.appendTo = function(e, t) {
            if (t = t || r.el, (e = e instanceof $ ? e : $(e)).length) {
                var o = t.offset(),
                    i = e.offset(),
                    n = {
                        top: o.top - i.top - parseInt(e.css("border-top-width")) + e.scrollTop(),
                        left: o.left - i.left - parseInt(e.css("border-left-width")) + e.scrollLeft()
                    };
                "static" === e.css("position") && e.css("position", "relative"), t.appendTo(e).css(n)
            }
        };
        this.updateDropArea = function(e) {
            r.droppable.dropArea = [];
            var t = r.settings.droppable instanceof $ ? r.settings.droppable : $(r.settings.droppable);
            r.addDroppable(t)
        }, this.updateDragElement = function() {
            r.droppable.dragElement = [], r.droppable.dragElement = {
                originalPos: r.getPosition(),
                id: r.el[0].id,
                originalDropArea: null,
                width: r.draggableBox.width(),
                height: r.draggableBox.height(),
                outerWidth: r.draggableBox.outerWidth(),
                outerHeight: r.draggableBox.outerHeight(),
                x: 0,
                y: 0
            };
            var e = r.droppable.dragElement;
            e.setCenter = function() {
                var t = r.draggableBox.offset();
                e.x = t.left + e.outerWidth / 2, e.y = t.top + e.outerHeight / 2
            }, e.setCenter(), e.originalDropArea = x()
        }, this.resetDroppable = function(e) {
            e && (r.settings.droppable = e), r.updateDragElement(), r.updateDropArea()
        }, this.addDroppable = function(e) {
            (e instanceof $ ? e : $(e)).each(function() {
                var e = $(this),
                    t = e.offset(),
                    o = e.outerHeight(),
                    i = e.outerWidth(),
                    n = parseInt(e.css("border-top-width")),
                    a = parseInt(e.css("border-left-width")),
                    s = $.clayfy.getInner(e);
                r.droppable.dropArea.push({
                    el: e,
                    id: this.id,
                    left: t.left,
                    top: t.top,
                    width: i,
                    height: o,
                    innerWidth: s.innerWidth,
                    innerHeight: s.innerHeight,
                    offset: {
                        innerTop: t.top + n,
                        innerLeft: t.left + a,
                        innerBottom: s.innerHeight + t.top + n,
                        innerRight: s.innerWidth + t.left + a
                    },
                    right: t.left + i,
                    bottom: t.top + o,
                    active: !1,
                    triggered: !1
                })
            })
        };
        var w = function(e) {
                var t = r.droppable.dragElement;
                t.setCenter();
                for (var o = 0, i = r.droppable.dropArea.length; o < i; o++) {
                    var n = r.droppable.dropArea[o];
                    n && (t.x > n.left && t.x < n.right && t.y > n.top && t.y < n.bottom ? n.active = !0 : n.active = !1, !n.triggered && n.active ? (n.triggered = !0, r.el.trigger($.Event("clayfy-dragenter", {
                        target: n.el[0],
                        droparea: n.el
                    }))) : n.triggered && !n.active && (n.triggered = !1, r.el.trigger($.Event("clayfy-dragleave", {
                        target: n.el[0],
                        droparea: n.el,
                        area: n
                    }))))
                }
            },
            x = function() {
                var e = r.droppable.dragElement;
                e.setCenter();
                for (var t = !1, o = 0, i = r.droppable.dropArea.length; o < i; o++) {
                    var n = r.droppable.dropArea[o];
                    n && e.x > n.left && e.x < n.right && e.y > n.top && e.y < n.bottom && (n.active = !0, n.triggered = !0, t = n)
                }
                return t
            },
            z = function() {
                for (var e, t = 0, o = r.droppable.dropArea.length; t < o; t++) r.droppable.dropArea[t].active && (e = r.droppable.dropArea[t]);
                if ("canceling" === r.status) {
                    if (e && (e.active = !1, e.triggered = !1, r.el.trigger($.Event("clayfy-dragleave", {
                            target: e.el[0],
                            droparea: e.el
                        }))), !(e = r.droppable.dragElement.originalDropArea)) return;
                    e.active = !0, e.triggered = !0
                }
                e ? (r.el.trigger($.Event("clayfy-dropinside", {
                    target: e.el[0],
                    droparea: e.el,
                    area: e
                })), r.settings.fit && function(e) {
                    var t = r.contentGhost ? r.contentGhost : r.draggableBox,
                        o = {},
                        i = r.el.offset(),
                        n = i.top,
                        a = i.left,
                        s = r.droppable.dragElement.outerWidth + i.left,
                        l = r.droppable.dragElement.outerHeight + i.top;
                    t.outerWidth() <= e.innerWidth && (s > e.offset.innerRight && (o.left = parseInt(t.css("left")) + e.offset.innerRight - s), a < e.offset.innerLeft && (o.left = parseInt(t.css("left")) + e.offset.innerLeft - a)), t.outerHeight() <= e.innerHeight && (l > e.offset.innerBottom && (o.top = parseInt(t.css("top")) + e.offset.innerBottom - l), n < e.offset.innerTop && (o.top = parseInt(r.el.css("top")) + e.offset.innerTop - n)), r.el.css(o)
                }(e)) : (r.el.trigger("clayfy-dropoutside"), r.settings.dropoutside || function() {
                    var e = r.droppable.dragElement.originalDropArea;
                    e && r.el.trigger($.Event("clayfy-dropinside", {
                        target: e.el[0],
                        droparea: e.el
                    })), r.settings.overflow && !r.settings.ghost ? r.el.css({
                        left: r.initPos.x - r.initPos.parent.offset().left - parseInt(r.initPos.parent.css("border-left-width")) + r.initPos.scrollLeft,
                        top: r.initPos.y - r.initPos.parent.offset().top - parseInt(r.initPos.parent.css("border-top-width")) + r.initPos.scrollTop
                    }) : r.el.css({
                        left: r.initPos.x,
                        top: r.initPos.y
                    })
                }(), r.settings.dropoutside && r.settings.migrate && r.settings.overflow && r.appendTo(r.tempContainer)), e && (r.droppedTarget = e.el[0])
            },
            B = function(e) {
                if (s) {
                    s = !1, document.body.style.cursor = "", e.preventDefault(), isTouchDevice() && r.settings.helperOnMobile && H(), r.settings.overflow && (r.appendTo(r.initPos.parent, r.draggableBox), r.appendTo(r.initPos.parent)), r.settings.coverScreen && S(), r.settings.drop.call(r);
                    var t = $.Event("clayfy-drop", {
                        pageX: e.pageX,
                        pageY: e.pageY,
                        screenX: e.screenX,
                        screenY: e.screenY
                    });
                    r.el.trigger(t), $(document).off("mousemove touchmove", X).off("mouseup touchend", B)
                }
            },
            P = function(e) {
                s = !0, r.settings.coverScreen && Y(), isTouchDevice() && r.settings.helperOnMobile && D(), document.body.style.cursor = n, r.settings.dragstart.call(r, e), r.el.trigger("clayfy-dragstart");
                var t = r.el.parent();
                r.initPos.parent = t, r.settings.overflow && r.appendTo(r.tempContainer, r.draggableBox), r.settings.ghost && function(e) {
                    var t = r.getPosition(r.el),
                        o = r.settings.overflow ? r.tempContainer : r.el.parent(),
                        i = r.el.offset(),
                        n = r.initPos.parent ? r.initPos.parent.scrollTop() : 0,
                        a = r.initPos.parent ? r.initPos.parent.scrollLeft() : 0,
                        s = {
                            width: r.el.width(),
                            height: r.el.height(),
                            top: t.y,
                            left: t.x
                        };
                    if (!0 !== r.settings.ghost && (s = {
                            top: e.pageY - i.top + t.y + 5 - n,
                            left: e.pageX - i.left + t.x + 5 - a,
                            width: "auto",
                            height: "auto"
                        }), r.settings.overflow && (s.top = i.top - n, s.left = i.left - a, !0 !== r.settings.ghost && (s.top = e.pageY - n + 5, s.left = e.pageX - a + 5)), r.draggableBox.css(s), r.draggableBox.appendTo(o), r.contentGhost) {
                        var l;
                        switch (r.contentGhost.html(""), typeof r.settings.ghost) {
                            case "string":
                                l = r.settings.ghost;
                                break;
                            case "function":
                                l = r.settings.ghost()
                        }
                        if (r.contentGhost.append(l), r.container.offset) {
                            var d = r.container.offset.innerBottom,
                                g = r.container.offset.innerRight,
                                f = r.draggableBox.offset(),
                                p = f.top + r.contentGhost.outerHeight() - d,
                                c = f.left + r.contentGhost.outerWidth() - g;
                            0 < p && r.draggableBox.css({
                                top: e.pageY - i.top + t.y + 5 - p
                            }), 0 < c && r.draggableBox.css({
                                left: e.pageX - i.left + t.x + 5 - c
                            })
                        }
                    }
                }(e), r.x = e.pageX, r.y = e.pageY, r.setBounderies();
                var o = r.getPosition(r.el);
                r.initPos = {
                    x: o.x,
                    y: o.y,
                    scrollLeft: t.scrollLeft(),
                    scrollTop: t.scrollTop(),
                    parent: t
                }, r.history = {
                    dX: [0, 0, 0],
                    dY: [0, 0, 0],
                    diffDX: 0,
                    diffDY: 0
                }
            },
            D = function() {
                l.addClass("clayfy-body-scroll-disabled"), l.wrapInner('<div class="clayfy-scroll-disabled"></div>')
            },
            H = function() {
                $("body > .clayfy-scroll-disabled").contents().unwrap(), l.removeClass("clayfy-body-scroll-disabled")
            },
            X = function(e) {
                e.preventDefault(), e.originalEvent.touches && 1 == e.originalEvent.touches.length && (e = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0]), r.dX = e.pageX - r.x, r.dY = e.pageY - r.y, $.clayfy.dX = r.dX, $.clayfy.dY = r.dY, r.history.diffDX = (r.history.dX[0] + r.history.dX[1] - (r.history.dX[2] + r.dX)) / 2, r.history.diffDY = (r.history.dY[0] + r.history.dY[1] - (r.history.dY[2] + r.dY)) / 2, r.history.dX = [r.history.dX[1], r.history.dX[2], r.dX], r.history.dY = [r.history.dY[1], r.history.dY[2], r.dY], r.fixDeltasWithBounderies(), (r.settings.move || r.settings.ghost) && r.move(), r.settings.drag.call(r, e);
                var t = $.Event("clayfy-drag", {
                    shiftKey: e.shiftKey,
                    pageX: e.pageX,
                    pageY: e.pageY,
                    clientX: e.clientX,
                    clientY: e.clientY,
                    screenX: e.screenX,
                    screenY: e.screenY,
                    altKey: e.altKey
                });
                r.el.trigger(t)
            },
            Y = function() {
                l.append(d)
            },
            S = function() {
                d.detach()
            };
        this.getContainerBounderies = function() {
                if (!r.container.type) return !1;
                var e, t, o = r.draggableBox.offset(),
                    i = {};
                return r.container.update(), e = r.contentGhost ? r.contentGhost.outerWidth() : r.draggableBox.outerWidth(), t = r.contentGhost ? r.contentGhost.outerHeight() : r.draggableBox.outerHeight(), i = {
                    top: o.top - r.container.offset.innerTop,
                    right: r.container.offset.innerRight - o.left - e,
                    bottom: r.container.offset.innerBottom - o.top - t,
                    left: o.left - r.container.offset.innerLeft
                }, isNaN(i.top) && (i = {
                    top: 1e13,
                    right: 1e13,
                    bottom: 1e13,
                    left: 1e13
                }), i
            }, this.setBounderies = function() {
                var e = r.settings.bounderies;
                r.actualPos = r.getPosition(), r.bounderies = {
                    top: -e[0],
                    right: e[1],
                    bottom: e[2],
                    left: -e[3]
                };
                var t = r.getContainerBounderies();
                t && (r.bounderies = {
                    top: Math.max(-t.top, r.bounderies.top),
                    right: Math.min(t.right, r.bounderies.right),
                    bottom: Math.min(t.bottom, r.bounderies.bottom),
                    left: Math.max(-t.left, r.bounderies.left)
                })
            }, this.move = function() {
                r.draggableBox.css({
                    top: r.actualPos.y + $.clayfy.dY,
                    left: r.actualPos.x + $.clayfy.dX
                })
            }, this.getPosition = function(e) {
                var t = r.el.offsetParent(),
                    o = (void 0 === e ? r.draggableBox || r.el : e).position();
                return {
                    y: o.top + t.scrollTop(),
                    x: o.left + t.scrollLeft()
                }
            }, this.fixDeltasWithBounderies = function() {
                $.clayfy.dX > r.bounderies.right && ($.clayfy.dX = r.bounderies.right), $.clayfy.dX < r.bounderies.left && ($.clayfy.dX = r.bounderies.left), $.clayfy.dY < r.bounderies.top && ($.clayfy.dY = r.bounderies.top), $.clayfy.dY > r.bounderies.bottom && ($.clayfy.dY = r.bounderies.bottom), r.settings.moveX || ($.clayfy.dX = 0), r.settings.moveY || ($.clayfy.dY = 0)
            }, this.destroy = function() {}, r.originalPos = r.getPosition(), r.actualPos = r.originalPos,
            function() {
                var e = r.settings.container;
                e instanceof o ? r.container = e : r.settings.container && (r.container = new o(r.el, e))
            }(), r.settings.ghost ? (!0 === r.settings.ghost ? (r.draggableBox = r.el.clone(), r.draggableBox.addClass("clayfy-ghost-opacity")) : (r.draggableBox = $("<div>", {
                margin: r.el.css("margin")
            }), r.contentGhost = $('<div class="clayfy-ghost-content" style="position:absolute"></div>'), r.draggableBox.append(r.contentGhost)), r.draggableBox.css({
                position: "absolute",
                width: "100%",
                height: "100%"
            }).addClass("clayfy-ghost")) : r.draggableBox = r.el, r.el.addClass("clayfy-box"), r.settings.move || r.el.addClass("clayfy-not-move"), n = r.el.css("cursor"), a = $(r.settings.not), r.settings.overflow && l.append(r.tempContainer), r.el.on("mousedown touchstart", function(e) {
                a.is(e.target) || r.el.has(e.target).length && !r.settings.propagate || !isTouchDevice() && void 0 !== e.which && 1 !== e.which || ! function(e) {
                    var t = e.pageX - r.el.offset().left,
                        o = e.pageY - r.el.offset().top,
                        i = $("<div>", {
                            style: "position:absolute;left:0;top:0;width:100%;height:100%"
                        });
                    r.el.append(i);
                    var n = i.width(),
                        a = i.height();
                    return i.remove(), !(n < t || a < o)
                }(e) || (e.originalEvent.touches && 1 == e.originalEvent.touches.length && (e = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0]), e.preventDefault(), isTouchDevice() && r.settings.mobileDelay ? r.callableIfNotMove.callFunction(e, r.settings.mobileDelay, function() {
                    P(e), $(document).on("mousemove touchmove", X).on("mouseup touchend", B)
                }) : r.callableIfNotMove.callFunction(e, r.settings.delay, function() {
                    P(e), $(document).on("mousemove touchmove", X).on("mouseup touchend", B)
                }))
            }), r.settings.escape && (r.el.on("clayfy-dragstart", function(e) {
                e.stopPropagation(), $(window).on("keydown", u)
            }), r.el.on("clayfy-drop", function() {
                $(window).off("keydown", u)
            })), !1 !== r.settings.scrollable && "node" === r.container.type && (r.settings.container instanceof o || ("string" == typeof r.settings.scrollable ? r.settings.scrollable = r.settings.scrollable ? r.settings.scrollable + " , " + r.settings.container : r.settings.container : r.settings.scrollable instanceof $ && (r.settings.scrollable = r.settings.scrollable.add(r.settings.container)))), r.el.on("clayfy-dragstart", function() {
                $(r.settings.scrollable).each(function() {
                    var e = $(this);
                    if (!e.length) return !0;
                    var t = y(e);
                    if (!t.x && !t.y) return !0;
                    var o = e[0].getBoundingClientRect(),
                        i = b(e),
                        n = parseInt(e.css("border-top-width")),
                        a = parseInt(e.css("border-left-width")),
                        s = {
                            el: e,
                            top: o.top + n,
                            bottom: o.top + i.innerHeight + n,
                            left: o.left + a,
                            right: o.left + i.innerWidth + a,
                            innerHeight: i.innerHeight,
                            innerWidth: i.innerWidth,
                            interval: {
                                top: !1,
                                bottom: !1,
                                left: !1,
                                right: !1
                            },
                            isParent: !r.settings.overflow && r.el.offsetParent().is(e),
                            isBody: e.is("body")
                        };
                    if (s.isBody) {
                        var l = $(window);
                        s.top = 0, s.left = 0, s.bottom = l.height(), s.right = l.width(), s.innerHeight = l.height(), s.innerWidth = l.width()
                    }
                    r.scrollables.push(s)
                })
            }), r.el.on("clayfy-drag", function(e) {
                var t, o, i = r.contentGhost ? r.contentGhost : r.draggableBox,
                    n = r.draggableBox[0].getBoundingClientRect(),
                    a = i.offset(),
                    s = {
                        top: n.top,
                        bottom: n.top + i.outerHeight(),
                        left: n.left,
                        right: n.left + i.outerWidth(),
                        x: 0,
                        y: 0
                    };
                s.x = (s.right - s.left) / 2 + s.left, s.y = (s.bottom - s.top) / 2 + s.top, 0 < r.history.diffDY && g && (g = !1, r.y = Math.min(a.top + i.outerHeight(), e.pageY)), r.history.diffDY < 0 && f && (f = !1, r.y = Math.max(a.top, e.pageY)), 0 < r.history.diffDX && c && (c = !1, r.x = Math.min(a.left + i.outerWidth(), e.pageX)), r.history.diffDX < 0 && p && (p = !1, r.x = Math.max(a.left, e.pageX));
                for (var l = 0, d = r.scrollables.length; l < d; l++) {
                    var h = r.scrollables[l],
                        u = 0,
                        y = s.top - h.top,
                        b = h.bottom - s.bottom,
                        w = s.left - h.left,
                        x = h.right - s.right,
                        $ = s.x < h.right && s.x > h.left,
                        z = s.y < h.bottom && s.y > h.top;
                    if ((o = h).el[0].scrollHeight - o.el.scrollTop() !== o.innerHeight && b < 6 && (-6 < b || h.isBody) && $ ? (v(e, h, "bottom"), m(h, "top"), u++) : (m(h, "bottom"), h.el.scrollTop() && y < 6 && (-6 < y || h.isBody) && $ ? (v(e, h, "top"), u++) : m(h, "top")), h.el.scrollLeft() && w < 6 && (-6 < w || h.isBody) && z ? (v(e, h, "left"), m(h, "right"), u++) : (m(h, "left"), (t = h).el[0].scrollWidth - t.el.scrollLeft() !== t.innerWidth && x < 6 && (-6 < x || h.isBody) && z ? (v(e, h, "right"), u++) : m(h, "right")), u) break
                }
            }), r.el.on("clayfy-drop", m), 0 != r.settings.droppable ? (r.updateDragElement(), r.updateDropArea(), r.el.on("clayfy-dragstart", r.updateDragElement), r.el.on("clayfy-dragstart", r.updateDropArea), r.el.on("clayfy-drag", w), r.el.on("clayfy-drop", z), r.settings.ghost && (r.el.on("clayfy-dropinside", h), r.el.on("clayfy-dropoutside", h)), r.el.on("clayfy-dragstart", function() {
                x() || (r.el.removeClass("clayfy-dropinside"), r.draggableBox.removeClass("clayfy-dropinside"))
            }), r.el.on("clayfy-dragenter", function(e) {
                r.el.addClass("clayfy-dragenter"), r.draggableBox.addClass("clayfy-dragenter"), e.droparea.addClass("clayfy-dragenter"), r.el[0].id && e.droparea.addClass("clayfy-dragenter-" + r.el[0].id)
            }), r.el.on("clayfy-dragleave", function(e) {
                r.el.removeClass("clayfy-dropinside"), r.draggableBox.removeClass("clayfy-dropinside"), e.droparea.removeClass("clayfy-dropinside"), r.el[0].id && e.droparea.removeClass("clayfy-dropinside-" + r.el[0].id)
            }), r.el.on("clayfy-dragleave clayfy-drop", function(e) {
                r.el.removeClass("clayfy-dragenter"), r.draggableBox.removeClass("clayfy-dragenter"), $(".clayfy-dragenter").removeClass("clayfy-dragenter"), r.el[0].id && $(".clayfy-dragenter-" + r.el[0].id).removeClass("clayfy-dragenter-" + r.el[0].id)
            }), r.el.on("clayfy-dropinside", function(e) {
                r.el.addClass("clayfy-dropinside"), r.draggableBox.addClass("clayfy-dropinside"), e.droparea.addClass("clayfy-dropinside"), r.el[0].id && e.droparea.addClass("clayfy-dropinside-" + r.el[0].id), r.settings.migrate && r.appendTo(e.droparea)
            })) : r.settings.ghost && r.el.on("clayfy-drop", h)
    }

    function o(e, t) {
        this.draggableEl = e instanceof $ ? e : $(e), this.values, this.el, this.type, this.originalDraggable, this.width = 0, this.height = 0, this.innerHeight = 0, this.innerWidth = 0, this.offset = {
            top: 0,
            left: 0,
            innerBottom: 0,
            innerRight: 0,
            innerLeft: 0,
            innerTop: 0
        };
        var o = this,
            i = function(e) {
                var t, o, i, n, a, r = e instanceof $ ? e : $(e);
                return r.length ? (t = r[0].style.position, "static" === r.css("position") && r.css({
                    position: "relative"
                }), i = $("<div>", {
                    style: "position:absolute;top:0;left:0;bottom:0;right:0"
                }), o = $("<div>", {
                    style: "position:absolute;top:0;left:0;width:100%;height:100%"
                }), i.append(o), r.append(i), n = o.width(), a = o.height(), i.remove(), r[0].style.position = t, {
                    innerWidth: n,
                    innerHeight: a
                }) : {
                    width: 0,
                    height: 0
                }
            };
        this.getDraggableValues = function() {
            var e = o.draggableEl.offset(),
                t = o.draggableEl.offsetParent();
            return {
                position: {
                    top: o.draggableEl.position().top + t.scrollTop(),
                    left: o.draggableEl.position().left + t.scrollLeft()
                },
                offset: e,
                outerWidth: o.draggableEl.outerWidth(),
                outerHeight: o.draggableEl.outerHeight()
            }
        }, "string" == typeof t || t instanceof $ ? (o.el = t instanceof $ ? t : $(t), o.type = "node", "static" === o.el.css("position") && o.el.css("position", "relative"), o.update = function() {
            var e = i(o.el);
            o.width = o.el.width(), o.height = o.el.height(), o.innerWidth = e.innerWidth, o.innerHeight = e.innerHeight, o.offset = o.el.offset(), o.offset.innerTop = o.offset.top + parseInt(o.el.css("border-top-width")), o.offset.innerLeft = o.offset.left + parseInt(o.el.css("border-left-width")), o.offset.innerBottom = o.offset.innerTop + o.innerHeight, o.offset.innerRight = o.offset.innerLeft + o.innerWidth
        }) : (o.values = t, o.type = "object", o.update = function() {
            var e = o.getDraggableValues();
            o.offset = {
                top: e.offset.top - (e.position.top - o.originalDraggable.position.top) - o.values[0],
                left: e.offset.left - (e.position.left - o.originalDraggable.position.left) - o.values[3]
            }, o.width = o.originalDraggable.outerWidth + o.values[3] + o.values[1], o.height = o.originalDraggable.outerHeight + o.values[0] + o.values[2], o.innerWidth = o.width, o.innerHeight = o.height, o.offset.innerTop = o.offset.top, o.offset.innerLeft = o.offset.left, o.offset.innerBottom = o.offset.top + o.height, o.offset.innerRight = o.offset.left + o.width
        }, o.originalDraggable = o.getDraggableValues()), o.update()
    }

    function i(e, o) {
        this.el = e instanceof $ ? e : $(e), this.originalSize = {}, this.initSize = {}, this.handlers = [], this.actualSize, this.newSize, this.draggable, this.preserveAspectRatio = !1, this.shift = !1, this.status = "ready", this.touchableDevice;
        var i = $.extend(!0, {}, $.clayfy.settings, {
            callbacks: {
                resizestart: function() {},
                resize: function() {},
                resizeend: function() {}
            }
        });
        this.settings = $.extend(!0, {}, i, o);
        var a, r = this,
            s = !1,
            l = function(e) {
                27 === e.keyCode && r.cancel()
            };
        this.getSize = function() {
                r.parent = r.el.offsetParent();
                var e = r.parent,
                    t = r.el.position();
                return {
                    width: r.el.width(),
                    height: r.el.height(),
                    left: t.left + e.scrollLeft(),
                    top: t.top + e.scrollTop(),
                    outerWidth: r.el.outerWidth(),
                    outerHeight: r.el.outerHeight()
                }
            }, this.getNewSize = function() {
                var e = r.el.outerHeight(),
                    t = r.el.outerWidth(),
                    o = r.el.position(),
                    i = o.left + r.parent.scrollLeft(),
                    n = o.top + r.parent.scrollTop();
                return {
                    outerWidth: t,
                    outerHeight: e,
                    top: n,
                    left: i,
                    right: i + t,
                    bottom: n + e,
                    width: r.el.width(),
                    height: r.el.height()
                }
            }, this.resize = {
                left: function() {
                    r.el.width(r.actualSize.width - $.clayfy.dX), "relative" !== r.cssPosition && r.el.css({
                        left: r.actualSize.left + $.clayfy.dX
                    })
                },
                top: function() {
                    r.el.height(r.actualSize.height - $.clayfy.dY), "relative" !== r.cssPosition && r.el.css({
                        top: r.actualSize.top + $.clayfy.dY
                    })
                },
                bottom: function() {
                    r.el.height(r.actualSize.height + $.clayfy.dY)
                },
                right: function() {
                    r.el.width(r.actualSize.width + $.clayfy.dX)
                }
            }, this.hideHandlers = function() {
                "ready" === r.status && ($.each(r.handlers, function(e, t) {
                    t.el.css("display", "none")
                }), s = !1)
            }, this.showHandlers = function() {
                s || "ready" !== r.status && !r.touchableDevice || ($.each(r.handlers, function(e, t) {
                    t.el.css("display", "block")
                }), s = !0, r.updateHandlersPosition())
            }, this.updateHandlersPosition = function() {
                r.newSize = r.getNewSize(), $.each(r.handlers, function(e, t) {
                    t.updatePosition()
                })
            }, this.cancel = function() {
                console.log("cancelled"), r.status = "ready", r.hideHandlers(), r.status = "canceling", $("body").trigger("mouseup");
                var e = "relative" !== r.cssPosition ? r.initSize : {
                    width: r.initSize.width,
                    height: r.initSize.height
                };
                r.el.animate(e, 100, function() {
                    r.status = "ready", r.el.is(":hover") && r.showHandlers(), r.el.trigger("clayfy-cancel")
                })
            },
            function() {
                r.touchableDevice = isTouchDevice(), r.originalSize = r.getSize(), r.actualSize = r.originalSize, r.newSize = r.getNewSize(),
                    function() {
                        var e = ["top left", "top right", "bottom left", "bottom right", "left", "right", "top", "bottom"];
                        r.touchableDevice && (e = ["bottom right"]), "static" === r.el.css("position") && r.el.css("position", "relative"), r.cssPosition = r.el.css("position");
                        var o = {
                            container: r.settings.container,
                            not: ".clayfy-handler",
                            escape: !1,
                            droppable: r.settings.droppable
                        };
                        o = $.extend(!0, {}, r.settings, o), r.settings.not && (o.not += "," + r.settings.not), r.settings.move && "relative" !== r.cssPosition || (o.move = !1), r.draggable = new t(r.el, o);
                        for (var i = 0; i < e.length; i++) {
                            var a = e[i].split(" "),
                                s = !0;
                            for (var l in a) r.settings.hasOwnProperty(a[l]) && r.settings[a[l]] || (s = !1);
                            s && r.handlers.push(new n(e[i], r))
                        }
                        r.touchableDevice && r.el.addClass("clayfy-touch-device")
                    }(), r.preserveAspectRatio = r.settings.preserveAspectRatio, r.el.on("clayfy-resizestart", function(e) {
                        r.initSize = r.getNewSize(), $(window).on("keydown", l), r.status = "resizing"
                    }), r.el.on("clayfy-resizeend", function() {
                        $(window).off("keydown", l), r.status = "ready"
                    }), r.el.on("clayfy-dragstart", function(e) {
                        e.stopPropagation(), r.initSize = r.getSize(), r.status = "dragging"
                    }), r.el.on("clayfy-drop", function(e) {
                        e.stopPropagation(), r.status = "ready"
                    }), r.el.on("clayfy-resize clayfy-drag", r.updateHandlersPosition), $(window).on("resize", r.updateHandlersPosition), r.el.on("clayfy-dragstart", function(e) {
                        e.stopPropagation(), $(window).on("keydown", l)
                    }), r.el.on("clayfy-drop", function(e) {
                        e.stopPropagation(), $(window).off("keydown", l)
                    });
                var e = r.el;
                $.each(r.handlers, function(t, o) {
                    r.hideHandlers(), e = e.add(o.el)
                }), e.on("mouseover", function() {
                    a && clearTimeout(a), r.showHandlers()
                }), e.on("mouseout", function() {
                    a = setTimeout(r.hideHandlers, 20)
                }), r.el.on("clayfy-resizeend clayfy-drop", function(e) {
                    e.stopPropagation(), r.el.parent().find(":hover").length || r.touchableDevice || (s = !1, r.el.trigger("mouseout"))
                }), r.touchableDevice && (e.on("touchstart", function() {
                    a && clearTimeout(a), r.showHandlers(), a = setTimeout(r.hideHandlers, 4e3)
                }), r.el.on("clayfy-resizeend clayfy-drop", function() {
                    r.el.trigger("click")
                }))
            }()
    }

    function n(e, o) {
        this.el = $("<div>", {
            class: "clayfy-handler clayfy-" + e,
            style: "position: absolute"
        }), this.resizable = o, this.position = e, this.draggable;
        var i = this,
            n = !1;
        this.updatePosition = function() {
            var e = o.newSize;
            switch (i.position) {
                case "left":
                    i.el.css({
                        width: 5,
                        left: e.left,
                        top: e.top,
                        height: e.outerHeight
                    });
                    break;
                case "right":
                    i.el.css({
                        width: 5,
                        left: e.right - 5,
                        top: e.top,
                        height: e.outerHeight
                    });
                    break;
                case "top":
                    i.el.css({
                        height: 5,
                        left: e.left,
                        top: e.top,
                        width: e.outerWidth
                    });
                    break;
                case "bottom":
                    i.el.css({
                        height: 5,
                        left: e.left,
                        top: e.bottom - 5,
                        width: e.outerWidth
                    });
                    break;
                case "top left":
                    i.el.css({
                        width: 8,
                        height: 8,
                        left: e.left,
                        top: e.top
                    });
                    break;
                case "top right":
                    i.el.css({
                        width: 8,
                        height: 8,
                        left: e.right - 8,
                        top: e.top
                    });
                    break;
                case "bottom left":
                    i.el.css({
                        width: 8,
                        height: 8,
                        left: e.left,
                        top: e.bottom - 8
                    });
                    break;
                case "bottom right":
                    i.resizable.touchableDevice ? i.el.css({
                        width: 18,
                        height: 18,
                        left: e.right - 20,
                        top: e.bottom - 20
                    }) : i.el.css({
                        width: 8,
                        height: 8,
                        left: e.right - 8,
                        top: e.bottom - 8
                    })
            }
        }, this.setBounderies = function(e) {
            var t, o, n, a, r = e || [1e5, 1e5, 1e5, 1e5],
                s = [];
            i.resizable.actualSize = i.resizable.getSize(), t = i.resizable.actualSize, o = i.resizable.settings, n = i.resizable.originalSize.width / i.resizable.originalSize.height, (a = i.draggable.getContainerBounderies()) || (a = {
                top: 1e13,
                right: 1e13,
                bottom: 1e13,
                left: 1e13
            });
            for (var l = 0, d = o.maxSize.length; l < d; l++) null === o.maxSize[l] && (o.maxSize[l] = 1e13);
            $.clayfy.getInner(i.draggable.el), "left" !== i.position && "top" !== i.position && "top left" !== i.position || (r[1] = t.outerWidth - o.minSize[0], r[3] = o.maxSize[0] - t.outerWidth, r[2] = t.outerHeight - o.minSize[1], r[0] = o.maxSize[1] - t.outerHeight, i.draggable.settings.bounderies = r, s[3] = Math.min(a.left, r[3], a.top * n, r[0] * n), s[0] = Math.min(a.top, r[0], a.left / n, r[3] / n), s[1] = Math.min(a.right, r[1], a.bottom * n + r[2], r[2] * n), s[2] = Math.min(a.bottom, r[2], a.right / n + r[1], r[1] / n)), "right" !== i.position && "bottom" !== i.position && "bottom right" !== i.position || (r[3] = t.outerWidth - o.minSize[0], r[1] = o.maxSize[0] - t.outerWidth, r[0] = t.outerHeight - o.minSize[1], r[2] = o.maxSize[1] - t.outerHeight, i.draggable.settings.bounderies = r, s[1] = Math.min(a.right, r[1], a.bottom * n, r[2] * n), s[2] = Math.min(a.bottom, r[2], a.right / n, r[1] / n), s[3] = Math.min(a.left, r[3], a.top * n + r[0], r[0] * n), s[0] = Math.min(a.top, r[0], a.left / n + r[3], r[3] / n)), "bottom left" === i.position && (r[0] = t.outerHeight - o.minSize[1], r[1] = t.outerWidth - o.minSize[0], r[2] = o.maxSize[1] - t.outerHeight, r[3] = o.maxSize[0] - t.outerWidth, i.draggable.settings.bounderies = r, s[3] = parseInt(Math.min(a.left, r[3], a.bottom * n, r[2] * n)), s[2] = parseInt(Math.min(a.bottom, r[2], a.left / n, r[3] / n)), s[0] = parseInt(Math.min(a.top, r[0], a.right / n + r[1], r[1] / n)), s[1] = parseInt(Math.min(a.right, r[1], a.top * n + r[0], r[0] * n))), "top right" === i.position && (r[0] = o.maxSize[1] - t.outerHeight, r[1] = o.maxSize[0] - t.outerWidth, r[2] = t.outerHeight - o.minSize[1], r[3] = t.outerWidth - o.minSize[0], i.draggable.settings.bounderies = r, s[0] = parseInt(Math.min(a.top, r[0], a.right / n, r[1] / n)), s[1] = parseInt(Math.min(a.right, r[1], a.top * n, r[0] * n)), s[3] = parseInt(Math.min(a.left, r[3], a.bottom * n + r[2], r[2] * n)), s[2] = parseInt(Math.min(a.bottom, r[2], a.left / n + r[3], r[3] / n))), i.originalBounderies = {
                top: -r[0],
                right: r[1],
                bottom: r[2],
                left: -r[3]
            }, i.aspectRatioBounderies = {
                top: -s[0],
                right: s[1],
                bottom: s[2],
                left: -s[3]
            }, i.draggable.bounderies = i.resizable.preserveAspectRatio ? i.aspectRatioBounderies : i.originalBounderies
        }, this.fixDeltas = function() {
            var e = $.clayfy;
            if (i.resizable.preserveAspectRatio) var t = i.resizable.originalSize.width / i.resizable.originalSize.height;
            !i.resizable.preserveAspectRatio && i.resizable.shiftKey && (t = i.resizable.actualSize.width / i.resizable.actualSize.height), (i.resizable.preserveAspectRatio || i.resizable.shiftKey) && ("right" === i.position && (e.dY = e.dX / t), "bottom" === i.position && (e.dX = e.dY * t), "left" === i.position && (e.dY = e.dX / t), "top" === i.position && (e.dX = e.dY * t), "top left" === i.position && (e.dY = e.dX / t), "top right" === i.position && (e.dY = -e.dX / t), "bottom left" === i.position && (e.dY = -e.dX / t), "bottom right" === i.position && (e.dY = e.dX / t))
        }, o.settings.className && i.el.addClass(o.settings.className), i.updatePosition(), i.resizable.el.after(i.el), i.draggable = new t(i.el, {
            move: !1,
            container: o.draggable.container,
            scroll: !1,
            escape: !1
        }), i.draggable.el.on("clayfy-drop", function(e) {
            o.el.trigger("clayfy-resizeend"), o.settings.callbacks.resizeend()
        }), i.draggable.el.on("clayfy-dragstart", function(e) {
            e.stopPropagation(), i.resizable.preserveAspectRatio || (i.resizable.originalSize = i.resizable.getSize()), o.el.trigger("clayfy-beforeresize"), i.setBounderies(), o.el.trigger("clayfy-resizestart"), o.settings.callbacks.resizestart(), n = !1
        }), i.draggable.el.on("clayfy-drag", function(e) {
            e.shiftKey && !o.preserveAspectRatio && (o.shiftKey = !0), e.shiftKey || (o.shiftKey = !1), !n || e.shiftKey || o.preserveAspectRatio || (console.log("Desactivate: preserve aspect ratio"), i.draggable.bounderies = i.originalBounderies, n = !1), n || !e.shiftKey || o.preserveAspectRatio || (console.log("Activate: preserve aspect ratio"), i.draggable.bounderies = i.aspectRatioBounderies, n = !0), o.preserveAspectRatio && !o.shiftKey && (i.draggable.bounderies = i.aspectRatioBounderies)
        }), -1 < e.indexOf("left") && i.draggable.el.on("clayfy-drag", function(t) {
            (o.preserveAspectRatio || o.shiftKey) && (i.fixDeltas(), "left" === e && o.resize.top()), o.resize.left()
        }), -1 < e.indexOf("top") && i.draggable.el.on("clayfy-drag", function(t) {
            (o.preserveAspectRatio || o.shiftKey) && (i.fixDeltas(), "top" === e && o.resize.left()), o.resize.top()
        }), -1 < e.indexOf("right") && i.draggable.el.on("clayfy-drag", function(t) {
            (o.preserveAspectRatio || o.shiftKey) && (i.fixDeltas(), "right" === e && o.resize.bottom()), o.resize.right()
        }), -1 < e.indexOf("bottom") && i.draggable.el.on("clayfy-drag", function(t) {
            (o.preserveAspectRatio || o.shiftKey) && (i.fixDeltas(), "bottom" === e && o.resize.right()), o.resize.bottom()
        }), i.draggable.el.on("clayfy-drag", function(e) {
            o.el.trigger("clayfy-resize"), o.settings.callbacks.resize()
        }), i.resizable.touchableDevice && i.el.addClass("clayfy-touch-device")
    }

    function a(o, i) {
        this.el = o instanceof $ ? o : $(o), this.draggableBox, this.dropArea = $("<div>", {
            class: "clayfy-sort-droparea"
        }), this.draggable, this.droppable, this.droppableParent, this.index, this.indexRelative, this.parent, this.callableIfNotMove = new e, this.settings = $.extend(!0, {}, $.clayfy.settings, i);
        var n, a, r = this,
            s = function(e) {
                27 === e.keyCode && r.cancel()
            },
            l = function() {
                r.dropArea.appendTo(r.el.parent()), r.dropArea.css({
                    position: "absolute",
                    width: r.el.outerWidth(),
                    height: r.el.outerHeight(),
                    top: r.el.position().top + parseInt(r.el.css("margin-top")) - parseInt(r.dropArea.css("border-top-width")),
                    left: r.el.position().left + parseInt(r.el.css("margin-left")) - parseInt(r.dropArea.css("border-left-width"))
                })
            },
            d = function(e) {
                f(), !1 !== r.el.triggerHandler("validateChange") && (r.parent.is($(r.droppedTarget).parent()) || r.settings.export) && !n || function() {
                    var e = r.parent.find(r.droppable);
                    if (r.parent.is($(r.droppedTarget).parent())) {
                        var t = e.index(r.el);
                        r.indexRelative < t ? e.eq(r.indexRelative).before(r.el) : e.eq(r.indexRelative).after(r.el)
                    } else e.length ? e.eq(r.indexRelative).before(r.el) : r.parent.append(r.el);
                    l()
                }();
                var t = r.dropArea.parent().offset(),
                    o = r.draggableBox.parent().offset(),
                    i = r.el.position().left + (t.left - o.left),
                    a = r.el.position().top + (t.top - o.top);
                return r.draggableBox.animate({
                    top: a,
                    left: i
                }, 200, function() {
                    r.dropArea.detach(), r.el[0].style.visibility = "", r.draggableBox.detach(), f();
                    var e = r.droppable.index(r.el);
                    e != r.index && (r.index = e, r.el.trigger($.Event("clayfy-changeorder", {
                        index: r.index,
                        order: r.droppable
                    }))), r.el.parent().find(".clayfy-sort-helper").remove()
                }), n = !1
            },
            g = function(e) {
                if (!r.el.is(e.target)) {
                    f();
                    var t = r.droppable.index(e.target),
                        o = r.droppable.index(r.el);
                    r.droppedTarget = e.target, o < t ? $(e.target).after(r.el) : $(e.target).before(r.el), l(), r.draggable.updateDropArea(), r.parent.find(r.droppable).length < 2 ? r.parent.find(".clayfy-sort-helper").length || r.parent.append('<div class="clayfy-sort-helper" style="position: absolute; width: 100%; height: 100%; top: 0; left:0; "></div>') : r.parent.find(".clayfy-sort-helper").remove(), $(".clayfy-sort-helper").each(function() {
                        var e = $(this);
                        e.parent().is(r.droppableParent) && r.draggable.addDroppable(e)
                    })
                }
            },
            f = function() {
                r.settings.siblings ? r.droppable = r.settings.siblings instanceof $ ? r.settings.siblings : $(r.settings.siblings) : r.droppable = r.el.siblings().andSelf()
            },
            p = function() {
                r.droppableParent || (r.droppableParent = r.el.parent()), r.droppable.each(function() {
                    r.droppableParent = r.droppableParent.add($(this).parent())
                })
            };
        this.cancel = function() {
                n = !0, $("body").trigger("mouseup")
            },
            function() {
                f(), p(),
                    function() {
                        r.draggableBox = r.el.clone(), r.draggableBox.css({
                            position: "absolute",
                            width: "100%",
                            height: "100%"
                        }).addClass("clayfy-sort-dragging");
                        var e = r.el.parent();
                        "static" === e.css("position") && e.css("position", "relative")
                    }(), a = $(r.settings.not), r.el.on("mousedown touchstart", function(e) {
                        "mousedown" === e.type && 1 !== e.which || a.is(e.target) || a.has(e.target).length || (e.preventDefault(), r.callableIfNotMove.callFunction(e, r.settings.delay, function() {
                            f(), p(), r.index = r.droppable.index(r.el), r.parent = r.el.parent(), r.indexRelative = r.parent.find(r.droppable).index(r.el), r.draggableBox.css({
                                width: r.el.outerWidth(),
                                height: r.el.outerHeight(),
                                top: r.el.position().top,
                                left: r.el.position().left
                            }), l(), r.draggableBox.appendTo(r.parent), r.el.css({
                                visibility: "hidden"
                            }), r.draggableBox.trigger($.Event(e.type, e))
                        }))
                    });
                var e = $.extend(!0, {}, r.settings, {
                    droppable: r.droppable,
                    escape: !1,
                    dropoutside: !0,
                    delay: 0
                });
                r.draggable = new t(r.draggableBox, e), r.draggableBox.on("clayfy-drop", d), r.draggableBox.on("clayfy-dropoutside", function(e) {
                    return !1
                }), r.draggableBox.on("clayfy-dragenter", g), r.draggableBox.on("clayfy-dragstart", function() {
                    r.draggable.resetDroppable(r.droppable), $(".clayfy-sort-helper").each(function() {
                        var e = $(this);
                        e.parent().is(r.droppableParent) && r.draggable.addDroppable(e)
                    })
                }), r.draggableBox.on("clayfy-dragstart", function(e) {
                    e.stopPropagation(), $(window).on("keydown", s)
                }), r.draggableBox.on("clayfy-drop", function() {
                    $(window).off("keydown", s)
                })
            }()
    }
    $.clayfy = {
        dX: 0,
        dY: 0,
        container: function(e, t) {
            return new o(e, t)
        },
        settings: {
            type: "draggable",
            bounderies: [1e7, 1e7, 1e7, 1e7],
            container: "",
            moveX: !0,
            moveY: !0,
            move: !0,
            not: "",
            ghost: !1,
            coverScreen: !0,
            scrollable: "",
            droppable: "",
            fit: !0,
            dropoutside: !1,
            migrate: !1,
            overflow: !1,
            escape: !0,
            propagate: !0,
            mobileDelay: 100,
            helperOnMobile: !0,
            delay: 100,
            preserveAspectRatio: !1,
            maxSize: [500, 200],
            minSize: [100, 50],
            left: !0,
            top: !0,
            right: !0,
            bottom: !0,
            className: "",
            siblings: "",
            export: !0,
            dragstart: function(e) {},
            drag: function(e) {},
            drop: function(e) {}
        },
        getInner: function(e) {
            var t, o, i, n, a, r = e instanceof $ ? e : $(e);
            return r.length ? (t = r[0].style.position, "static" === r.css("position") && r.css({
                position: "relative"
            }), i = $("<div>", {
                style: "position:absolute;top:0;left:0;bottom:0;right:0"
            }), o = $("<div>", {
                style: "position:absolute;top:0;left:0;width:100%;height:100%"
            }), i.append(o), r.append(i), n = o.width(), a = o.height(), i.remove(), r[0].style.position = t, {
                innerWidth: n,
                innerHeight: a
            }) : {
                width: 0,
                height: 0
            }
        }
    };
    var r, s = "clayfy";
    $.fn[s] = function(e) {
        var o = arguments;
        if (void 0 === e || "object" == typeof e) {
            var n = $.clayfy.settings.type;
            switch (void 0 !== e && void 0 !== e.type && (n = e.type), n) {
                case "draggable":
                    r = t;
                    break;
                case "resizable":
                    r = i;
                    break;
                case "sortable":
                    r = a
            }
            return this.each(function() {
                $.data(this, s) || $.data(this, s, new r(this, e))
            })
        }
        if ("string" == typeof e && "_" !== e[0] && "init" !== e) {
            if ("instance" === e) return this.length ? $.data(this[0], s) : null;
            if (0 != Array.prototype.slice.call(o, 1).length || -1 == $.inArray(e, $.fn[s].getters)) return this.each(function() {
                var t = $.data(this, s);
                "function" == typeof t[e] && t[e].apply(t, Array.prototype.slice.call(o, 1))
            });
            var l = $.data(this[0], s);
            return l[e].apply(l, Array.prototype.slice.call(o, 1))
        }
    }, $.fn[s].getters = ["getPosition"]
}(jQuery), isTouchDevice = function() {
    return "ontouchstart" in window || navigator.maxTouchPoints
}